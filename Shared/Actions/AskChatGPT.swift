import AppIntents
import SimpleKeychain
import OpenAISwift

struct AskChatGPT: AppIntent {
	static let title: LocalizedStringResource = "Ask ChatGPT"

	static let description = IntentDescription(
"""
Send a prompt to ChatGPT and get a text reply.

It does not remember previous conversations.

IMPORTANT: You must add your open OpenAI API key in the app settings before using this action.

NOTE: Using the GPT-4 model requires access to the beta: https://openai.com/waitlist/gpt-4
NOTE: The GPT-4 model generally costs 14x more than GPT-3.5.

TIP: If you want a dictionary back, end your prompt with: “Return the result as a JSON object. Don't include any other text than the JSON object.” and then pass the result to the “Get Dictionary from Input” action. For more consistent result, also describe the shape of the JSON and include an example.
""",
		categoryName: "AI"
	)

	@Parameter(title: "Prompt")
	var prompt: String

	@Parameter(title: "Model", default: .gpt3_5)
	var model: Model_AppEnum

	@Parameter(
		title: "Max Tokens",
		description: "The maximum number of tokens allowed for the generated answer. More about tokens: https://platform.openai.com/tokenizer"
	)
	var maxTokens: Int?

	@Parameter(
		title: "Temperature",
		description: "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or “topProbabilityMass” but not both. Default: 1",
		default: 1,
		// We don't use slider as it currently does not show the active value and it also does not respect the default value. (macOS 14)
//		controlStyle: .slider,
		inclusiveRange: (0, 2)
	)
	var temperature: Double

	@Parameter(
		title: "Top Probability Mass (top_p)",
		description: "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or “temperature” but not both. Default: 1",
		default: 1
	)
	var topProbabilityMass: Double

	@Parameter(
		title: "Presence Penalty",
		description: "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics. More info: https://platform.openai.com/docs/api-reference/parameter-details Default: 0",
		default: 0,
//		controlStyle: .slider,
		inclusiveRange: (-2, 2)
	)
	var presencePenalty: Double

	@Parameter(
		title: "Frequency Penalty",
		description: "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim. More info: https://platform.openai.com/docs/api-reference/parameter-details Default: 0",
		default: 0,
//		controlStyle: .slider,
		inclusiveRange: (-2, 2)
	)
	var frequencyPenalty: Double

	@Parameter(
		title: "Logit Bias",
		description:
"""
Modify the likelihood of specified tokens appearing in the completion.

Accepts a dictionary that maps tokens (specified by their token ID in the GPT tokenizer) to an associated bias value from -100 to 100. Use “Number” as the value type. You can use this tokenizer tool to convert text to token IDs. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.

As an example, you can pass {"50256": -100} to prevent the <|endoftext|> token from being generated.
""",
		inputOptions: String.IntentInputOptions(
			capitalizationType: .none,
			autocorrect: false,
			smartQuotes: false,
			smartDashes: false
		)
//		supportedTypeIdentifiers: ["public.json"]
	)
	// We are not using IntentFile as it cannot use a variable on macOS. (macOS 14)
//	var logitBias: IntentFile
	var logitBias: String

	static var parameterSummary: some ParameterSummary {
		Summary("Ask ChatGPT \(\.$prompt)") {
			\.$model
			\.$maxTokens
			\.$temperature
			\.$topProbabilityMass
			\.$presencePenalty
			\.$frequencyPenalty
			\.$logitBias
		}
	}

	func perform() async throws -> some IntentResult & ReturnsValue<String> {
		let keychain = SimpleKeychain(synchronizable: true)

		guard
			try keychain.hasItem(forKey: Constants.keychainKey_openAI),
			let token = try keychain.string(forKey: Constants.keychainKey_openAI).nilIfEmptyOrWhitespace
		else {
			throw "Please add your OpenAI API key in the settings of the main Actions app.".toError
		}

		let openAI = OpenAISwift(authToken: token)

		let logitBiasFinal = try logitBias
			.toData
			.jsonToDictionary()
			.compactMapKeys { Int($0) }
			.compactMapValues {
				if let double = $0 as? Double {
				  return double
				}

				if let string = $0 as? String {
				  return Double(string)
				}

				return nil
			}

		let response: OpenAI<MessageResult>
		do {
			response = try await openAI.sendChat(
				with: [
					.init(role: .system, content: "Keep it short."),
					.init(role: .user, content: prompt)
				],
				model: model == .gpt3_5 ? .chat(.chatgpt) : .gpt4(.gpt4),
				temperature: temperature,
				topProbabilityMass: topProbabilityMass,
				maxTokens: maxTokens,
				presencePenalty: presencePenalty,
				frequencyPenalty: frequencyPenalty,
				logitBias: logitBiasFinal
			)
		} catch OpenAIError.genericError(let error) {
			throw error.presentableMessage.toError
		} catch OpenAIError.decodingError(let error) {
			throw error.presentableMessage.toError
		} catch OpenAIError.chatError(let error) {
			var message = error.message

			if error.code == "model_not_found" {
				message += ". Make sure you have access to this model. GPT-4 requires special access."
			}

			throw error.message.toError
		}

		guard let reply = response.choices?.first?.message.content else {
			throw "Missing reply.".toError
		}

		return .result(value: reply)
	}
}

enum Model_AppEnum: String, AppEnum {
	case gpt3_5
	case gpt4

	static let typeDisplayRepresentation = TypeDisplayRepresentation(name: "Model")

	static let caseDisplayRepresentations: [Self: DisplayRepresentation] = [
		.gpt3_5: "GPT-3.5",
		.gpt4: "GPT-4 (Requires special access!)"
	]
}
